---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Button from '@/components/atoms/Button.astro'
import Input from '@/components/atoms/Input.astro'
import Label from '@/components/atoms/Label.astro'
import { FileList, FetchButton } from '@/components/solidjs/FileList'
import UserBadge from '@/components/ui/UserBadge.astro'
import SpinnerIcon from '@/components/icons/SpinnerIcon.astro'
import LoadingIcon from '@/components/icons/LoadingIcon.astro'
---

<BaseLayout title="Dashboard">
  <section class="flex w-full items-stretch">
    <div class="hidden md:flex p-2">
      <aside
        class="w-80 rounded-lg h-full bg-gray-300/5 border-white/10 border flex flex-col justify-between"
      >
        <header class="p-3 flex items-center justify-between">
          <h2 class="text-xl font-medium">Archivos</h2>
          <FetchButton client:visible />
        </header>
        <FileList client:visible />
        <footer class="p-3">
          <UserBadge />
        </footer>
      </aside>
    </div>

    <div class="grow p-2 flex flex-col">
      <div
        class="border-white/10 rounded-lg bg-black/10 h-full border-3 border-dashed p-4 flex"
      >
        <section class="max-w-3xl w-full mx-auto my-auto">
          <h1 class="text-2xl font-medium mb-6">Archivo a subir</h1>
          <div class="space-y-4">
            <form class="flex flex-col space-y-4" id="upload-file-form">
              <div class="flex flex-col gap-6">
                <div class="grid md:grid-cols-2 w-full gap-4">
                  <Label text="Nombre">
                    <Input
                      name="nombre"
                      type="text"
                      autocomplete="off"
                      placeholder="Apk en alpha"
                    />
                  </Label>

                  <Label text="Version">
                    <Input
                      name="version"
                      type="text"
                      autocomplete="off"
                      placeholder="0.216.58"
                    />
                  </Label>
                </div>

                <label
                  class="border-3 border-dashed rounded-2xl p-6 mt-2
                  min-h-36 md:min-h-48 h-full
                  border-white/30 bg-gray-500/5 text-gray-400
                  hover:bg-gray-300/5 hover:text-gray-300
                  active:bg-gray-300/10 active:text-gray-200
                  transition-colors
                  flex flex-col justify-center items-center relative isolate overflow-hidden"
                  id="file-input-label"
                >
                  <div id="file-input-spinner" class="hidden">
                    <SpinnerIcon class="mx-auto w-6 h-6 animate-spin" />
                    <p class="font-semibold select-none">Cargando archivo...</p>
                  </div>
                  <p
                    class="font-semibold select-none inset-0 absolute -z-10 flex justify-center items-center p-6"
                    id="file-span"
                  >
                    Arrastra y suelta un archivo o haz click para seleccionar
                    uno
                  </p>
                  <div
                    id="file-message-container"
                    class="hidden rounded shadow p-3 text-sm space-y-2 transition-colors border
                    bg-black/20 text-gray-300 border-white/10
                    hover:bg-black/30 hover:border-white/20"
                  >
                  </div>
                  <input
                    id="app-file-input"
                    name="app_file"
                    type="file"
                    accept=".apk,.msi,.msix,.exe"
                    hidden
                  />
                </label>
              </div>

              <div class="flex flex-wrap justify-between gap-4">
                <div>
                  <p id="error-message-upff" class="font-medium text-red-300">
                  </p>
                  <p
                    id="success-message-upff"
                    class="font-medium text-green-300"
                  >
                  </p>
                  <div id="uploading-file-message" class="space-x-2 hidden">
                    <span class="font-medium text-white inline-block"
                      >Subiendo archivo</span
                    >
                    <LoadingIcon class="w-4 h-4 animate-spin inline-block" />
                  </div>
                </div>
                <div class="flex flex-wrap gap-4 ml-auto justify-end">
                  <button
                    id="clear-form"
                    type="reset"
                    class="font-semibold border-white/10 rounded-lg border text-sm px-5 py-3 hover:bg-white/10 hover:border-white/30 transition-colors"
                  >
                    Cancelar
                  </button>
                  <Button type="submit">Subir</Button>
                </div>
              </div>
            </form>
          </div>
        </section>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  import { uploadApk } from '@/core/controllers/archivos'
  import { fileTypeValues, maxFileSizeAllowed } from '@/core/consts'
  import { selectWith, getFileSize } from '@/core/lib/utils'
  import { uploadFileValidator } from '@/core/validators/uploadFileDto'
  ;(() => {
    const $uploadFileForm = selectWith<HTMLFormElement>('#upload-file-form')
    const $uploadingFileMessage = selectWith<HTMLFormElement>(
      '#uploading-file-message'
    )
    const $successMessage = selectWith<HTMLFormElement>('#success-message-upff')
    const $errorMessage = selectWith<HTMLFormElement>('#error-message-upff')
    const $fileInputLabel = selectWith<HTMLLabelElement>('#file-input-label')
    const $fileInputSpinner = selectWith<HTMLDivElement>('#file-input-spinner')
    const $fileInput = selectWith<HTMLInputElement>('#app-file-input')
    const $fileSpan = selectWith<HTMLSpanElement>('#file-span')
    const $fileMessageContainer = selectWith<HTMLDivElement>(
      '#file-message-container'
    )

    let selectedFile: null | File = null
    let fileType: string = ''

    $fileInputLabel.addEventListener('click', () => {
      $errorMessage.innerText = ''
      $successMessage.innerText = ''
      $fileSpan.classList.add('hidden')
      if (fileType === '') {
        $fileInputSpinner.classList.remove('hidden')
      }
    })

    const dropFileMessage = 'Suelta el archivo aquí'
    const dragDropFileMessage =
      'Arrastra y suelta un archivo o haz click para seleccionar uno'

    $fileInputLabel.addEventListener('dragover', (e) => {
      e.preventDefault()
      $fileSpan.textContent = dropFileMessage
      $fileSpan.classList.add('bg-white/5', 'text-white/70')
    })

    $fileInputLabel.addEventListener('dragleave', (e) => {
      e.preventDefault()
      $fileSpan.textContent = dragDropFileMessage
    })

    const handleFiles = (files: FileList | null) => {
      requestIdleCallback(() => {
        if (files == null || files[0] == null) {
          $errorMessage.innerText = 'No se ha seleccionado un archivo'
          tryRemoveSpinner()
          return
        }

        const [file] = files

        if (file.size > maxFileSizeAllowed) {
          $errorMessage.innerText = `El archivo no puede pesar más de ${maxFileSizeAllowed} MB (peso del archivo actual: ${(file.size / (1024 * 1024)).toFixed(2)} MB)`
          tryRemoveSpinner()
          return
        }

        if (file.type === '' && file.name.endsWith('.apk')) {
          selectedFile = new File([file], file.name, {
            type: 'application/vnd.android.package-archive'
          })
          fileType = fileTypeValues.apk
        } else if (file.name.endsWith('.apk')) {
          selectedFile = file
          fileType = fileTypeValues.apk
        } else if (
          file.name.endsWith('.msi') ||
          file.name.endsWith('.msix') ||
          file.name.endsWith('.exe')
        ) {
          selectedFile = file
          fileType = fileTypeValues.desktopApp
        } else {
          $errorMessage.innerText =
            'Tipo de archivo no permitido, solo se admiten estos tipos (.apk | .msi | .msix | .exe)'
          tryRemoveSpinner()
          return
        }

        $fileMessageContainer.innerHTML = `
          <div>
            <p class="text-gray-200 font-semibold">Archivo seleccionado:</p>
          </div>
          <div>
            <p class="text-gray-400">Tipo:</p>
            <p class="text-gray-200 font-medium">
              ${selectedFile.name.endsWith('.apk') ? 'Android App' : 'Aplicación de escritorio'}
            </p>
          </div>
          <div>
            <p class="text-gray-400 mr-1">Tamaño:</p>
            <p>${getFileSize(file.size)}</p>
            </div>
          <div>
            <p class="text-gray-400">Archivo:</p>
            <p class="overflow-hidden overflow-ellipsis">${selectedFile.name}</p>
          </div>
          <div class="mt-4">
            <div class="text-gray-400">Click para seleccionar otro archivo</div>
          </div>`

        $fileInputSpinner.classList.add('hidden')
        $fileMessageContainer.classList.remove('hidden')
      })
    }

    $fileInputLabel.addEventListener('drop', (e) => {
      e.preventDefault()

      $fileSpan.classList.add('hidden')
      $fileSpan.textContent = dragDropFileMessage
      $fileSpan.classList.remove('bg-white/5', 'text-white/70')
      if (fileType === '') {
        $fileInputSpinner.classList.remove('hidden')
      }

      if (e.dataTransfer != null) {
        handleFiles(e.dataTransfer.files)
      }
    })

    const tryRemoveSpinner = () => {
      if (fileType === '') {
        $fileSpan.classList.remove('hidden')
        $fileInputSpinner.classList.add('hidden')
      }
    }

    $fileInput.addEventListener('cancel', () => {
      tryRemoveSpinner()
    })

    $fileInput.addEventListener('change', () => {
      handleFiles($fileInput.files)
    })

    const clearForm = () => {
      $uploadFileForm.reset()
      selectedFile = null
      $successMessage.innerText = ''
      $errorMessage.innerText = ''
      fileType = ''
      $fileSpan.classList.remove('hidden')
      $fileMessageContainer.classList.add('hidden')
      $fileInputSpinner.classList.add('hidden')
      $fileMessageContainer.innerHTML = ''
      $fileSpan.textContent = dragDropFileMessage
      $fileSpan.classList.remove('bg-white/5', 'text-white/70')
    }

    $uploadFileForm.addEventListener('submit', async (e) => {
      e.preventDefault()
      $successMessage.innerText = ''
      $errorMessage.innerText = ''

      const formData = new FormData($uploadFileForm)

      const { data, error } = uploadFileValidator(Object.fromEntries(formData))

      if (error != null) {
        $errorMessage.innerText = error.message
        return
      }

      if (selectedFile == null) {
        $errorMessage.innerText = 'Seleccione el archivo a subir'
        return
      }

      $uploadingFileMessage.classList.remove('hidden')
      const { error: uploadError } = await uploadApk({
        nombre: data.nombre,
        tipo: fileType,
        version: data.version,
        appFile: selectedFile
      })
      $uploadingFileMessage.classList.add('hidden')

      if (uploadError) {
        $errorMessage.innerText = uploadError.message
        return
      }

      clearForm()
      $successMessage.innerText = 'El archivo se ha subido correctamente'
    })

    const $clearFormButton = selectWith<HTMLButtonElement>('#clear-form')

    $clearFormButton.addEventListener('click', () => {
      clearForm()
    })
  })()
</script>
